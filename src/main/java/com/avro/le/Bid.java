/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.avro.le;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Bid extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6878341899762671841L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bid\",\"namespace\":\"com.avro.le\",\"fields\":[{\"name\":\"bidId\",\"type\":\"string\"},{\"name\":\"schedules\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Schedule\",\"fields\":[{\"name\":\"startDateTime\",\"type\":\"string\"},{\"name\":\"endDateTime\",\"type\":\"string\"}]}}},{\"name\":\"subjectId\",\"type\":\"string\"},{\"name\":\"tutorId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bid> ENCODER =
      new BinaryMessageEncoder<Bid>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bid> DECODER =
      new BinaryMessageDecoder<Bid>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Bid> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Bid> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Bid> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bid>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Bid to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Bid from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Bid instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Bid fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence bidId;
   private java.util.List<com.avro.le.Schedule> schedules;
   private java.lang.CharSequence subjectId;
   private java.lang.CharSequence tutorId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bid() {}

  /**
   * All-args constructor.
   * @param bidId The new value for bidId
   * @param schedules The new value for schedules
   * @param subjectId The new value for subjectId
   * @param tutorId The new value for tutorId
   */
  public Bid(java.lang.CharSequence bidId, java.util.List<com.avro.le.Schedule> schedules, java.lang.CharSequence subjectId, java.lang.CharSequence tutorId) {
    this.bidId = bidId;
    this.schedules = schedules;
    this.subjectId = subjectId;
    this.tutorId = tutorId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bidId;
    case 1: return schedules;
    case 2: return subjectId;
    case 3: return tutorId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bidId = (java.lang.CharSequence)value$; break;
    case 1: schedules = (java.util.List<com.avro.le.Schedule>)value$; break;
    case 2: subjectId = (java.lang.CharSequence)value$; break;
    case 3: tutorId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bidId' field.
   * @return The value of the 'bidId' field.
   */
  public java.lang.CharSequence getBidId() {
    return bidId;
  }


  /**
   * Sets the value of the 'bidId' field.
   * @param value the value to set.
   */
  public void setBidId(java.lang.CharSequence value) {
    this.bidId = value;
  }

  /**
   * Gets the value of the 'schedules' field.
   * @return The value of the 'schedules' field.
   */
  public java.util.List<com.avro.le.Schedule> getSchedules() {
    return schedules;
  }


  /**
   * Sets the value of the 'schedules' field.
   * @param value the value to set.
   */
  public void setSchedules(java.util.List<com.avro.le.Schedule> value) {
    this.schedules = value;
  }

  /**
   * Gets the value of the 'subjectId' field.
   * @return The value of the 'subjectId' field.
   */
  public java.lang.CharSequence getSubjectId() {
    return subjectId;
  }


  /**
   * Sets the value of the 'subjectId' field.
   * @param value the value to set.
   */
  public void setSubjectId(java.lang.CharSequence value) {
    this.subjectId = value;
  }

  /**
   * Gets the value of the 'tutorId' field.
   * @return The value of the 'tutorId' field.
   */
  public java.lang.CharSequence getTutorId() {
    return tutorId;
  }


  /**
   * Sets the value of the 'tutorId' field.
   * @param value the value to set.
   */
  public void setTutorId(java.lang.CharSequence value) {
    this.tutorId = value;
  }

  /**
   * Creates a new Bid RecordBuilder.
   * @return A new Bid RecordBuilder
   */
  public static com.avro.le.Bid.Builder newBuilder() {
    return new com.avro.le.Bid.Builder();
  }

  /**
   * Creates a new Bid RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bid RecordBuilder
   */
  public static com.avro.le.Bid.Builder newBuilder(com.avro.le.Bid.Builder other) {
    if (other == null) {
      return new com.avro.le.Bid.Builder();
    } else {
      return new com.avro.le.Bid.Builder(other);
    }
  }

  /**
   * Creates a new Bid RecordBuilder by copying an existing Bid instance.
   * @param other The existing instance to copy.
   * @return A new Bid RecordBuilder
   */
  public static com.avro.le.Bid.Builder newBuilder(com.avro.le.Bid other) {
    if (other == null) {
      return new com.avro.le.Bid.Builder();
    } else {
      return new com.avro.le.Bid.Builder(other);
    }
  }

  /**
   * RecordBuilder for Bid instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bid>
    implements org.apache.avro.data.RecordBuilder<Bid> {

    private java.lang.CharSequence bidId;
    private java.util.List<com.avro.le.Schedule> schedules;
    private java.lang.CharSequence subjectId;
    private java.lang.CharSequence tutorId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.avro.le.Bid.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bidId)) {
        this.bidId = data().deepCopy(fields()[0].schema(), other.bidId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.schedules)) {
        this.schedules = data().deepCopy(fields()[1].schema(), other.schedules);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.subjectId)) {
        this.subjectId = data().deepCopy(fields()[2].schema(), other.subjectId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tutorId)) {
        this.tutorId = data().deepCopy(fields()[3].schema(), other.tutorId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Bid instance
     * @param other The existing instance to copy.
     */
    private Builder(com.avro.le.Bid other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bidId)) {
        this.bidId = data().deepCopy(fields()[0].schema(), other.bidId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.schedules)) {
        this.schedules = data().deepCopy(fields()[1].schema(), other.schedules);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subjectId)) {
        this.subjectId = data().deepCopy(fields()[2].schema(), other.subjectId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tutorId)) {
        this.tutorId = data().deepCopy(fields()[3].schema(), other.tutorId);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'bidId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBidId() {
      return bidId;
    }


    /**
      * Sets the value of the 'bidId' field.
      * @param value The value of 'bidId'.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder setBidId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bidId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bidId' field has been set.
      * @return True if the 'bidId' field has been set, false otherwise.
      */
    public boolean hasBidId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bidId' field.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder clearBidId() {
      bidId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'schedules' field.
      * @return The value.
      */
    public java.util.List<com.avro.le.Schedule> getSchedules() {
      return schedules;
    }


    /**
      * Sets the value of the 'schedules' field.
      * @param value The value of 'schedules'.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder setSchedules(java.util.List<com.avro.le.Schedule> value) {
      validate(fields()[1], value);
      this.schedules = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'schedules' field has been set.
      * @return True if the 'schedules' field has been set, false otherwise.
      */
    public boolean hasSchedules() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'schedules' field.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder clearSchedules() {
      schedules = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subjectId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubjectId() {
      return subjectId;
    }


    /**
      * Sets the value of the 'subjectId' field.
      * @param value The value of 'subjectId'.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder setSubjectId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.subjectId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subjectId' field has been set.
      * @return True if the 'subjectId' field has been set, false otherwise.
      */
    public boolean hasSubjectId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subjectId' field.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder clearSubjectId() {
      subjectId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tutorId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTutorId() {
      return tutorId;
    }


    /**
      * Sets the value of the 'tutorId' field.
      * @param value The value of 'tutorId'.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder setTutorId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tutorId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tutorId' field has been set.
      * @return True if the 'tutorId' field has been set, false otherwise.
      */
    public boolean hasTutorId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tutorId' field.
      * @return This builder.
      */
    public com.avro.le.Bid.Builder clearTutorId() {
      tutorId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bid build() {
      try {
        Bid record = new Bid();
        record.bidId = fieldSetFlags()[0] ? this.bidId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.schedules = fieldSetFlags()[1] ? this.schedules : (java.util.List<com.avro.le.Schedule>) defaultValue(fields()[1]);
        record.subjectId = fieldSetFlags()[2] ? this.subjectId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tutorId = fieldSetFlags()[3] ? this.tutorId : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bid>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bid>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bid>
    READER$ = (org.apache.avro.io.DatumReader<Bid>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bidId);

    long size0 = this.schedules.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.avro.le.Schedule e0: this.schedules) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.subjectId);

    out.writeString(this.tutorId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bidId = in.readString(this.bidId instanceof Utf8 ? (Utf8)this.bidId : null);

      long size0 = in.readArrayStart();
      java.util.List<com.avro.le.Schedule> a0 = this.schedules;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.avro.le.Schedule>((int)size0, SCHEMA$.getField("schedules").schema());
        this.schedules = a0;
      } else a0.clear();
      SpecificData.Array<com.avro.le.Schedule> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.avro.le.Schedule>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.avro.le.Schedule e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.avro.le.Schedule();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.subjectId = in.readString(this.subjectId instanceof Utf8 ? (Utf8)this.subjectId : null);

      this.tutorId = in.readString(this.tutorId instanceof Utf8 ? (Utf8)this.tutorId : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bidId = in.readString(this.bidId instanceof Utf8 ? (Utf8)this.bidId : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.avro.le.Schedule> a0 = this.schedules;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.avro.le.Schedule>((int)size0, SCHEMA$.getField("schedules").schema());
            this.schedules = a0;
          } else a0.clear();
          SpecificData.Array<com.avro.le.Schedule> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.avro.le.Schedule>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.avro.le.Schedule e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.avro.le.Schedule();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.subjectId = in.readString(this.subjectId instanceof Utf8 ? (Utf8)this.subjectId : null);
          break;

        case 3:
          this.tutorId = in.readString(this.tutorId instanceof Utf8 ? (Utf8)this.tutorId : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










